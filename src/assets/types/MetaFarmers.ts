/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MetaFarmersInterface extends utils.Interface {
  contractName: "MetaFarmers";
  functions: {
    "MAX_SUPPLY()": FunctionFragment;
    "PRICE()": FunctionFragment;
    "PRIVATE_RAFFLE_PRICE()": FunctionFragment;
    "RAFFLE_PRICE()": FunctionFragment;
    "RAFFLE_SUPPLY()": FunctionFragment;
    "WHITELIST_PRICE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getWorkflowStatus()": FunctionFragment;
    "gift(uint64)": FunctionFragment;
    "giveaway(address[])": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "notRevealedUri()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "payee(uint256)": FunctionFragment;
    "privateRaffleRedeemed(address)": FunctionFragment;
    "privateRedeemed(address)": FunctionFragment;
    "privateWhitelist()": FunctionFragment;
    "publicRedeemed(address)": FunctionFragment;
    "publicRedeemedCount()": FunctionFragment;
    "publicSaleMint(uint64)": FunctionFragment;
    "rafflePrivateRedeemedCount()": FunctionFragment;
    "raffleRedeemed(address)": FunctionFragment;
    "raffleRedeemedCount()": FunctionFragment;
    "raffleWhitelist()": FunctionFragment;
    "redeemPrivateRaffle(uint64,bytes32[])": FunctionFragment;
    "redeemPrivateSale(uint64,bytes32[])": FunctionFragment;
    "redeemRaffle(uint64,bytes32[])": FunctionFragment;
    "release(address)": FunctionFragment;
    "released(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reveal(string)": FunctionFragment;
    "revealed()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setNotRevealedURI(string)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "setPrivatePrice(uint256)": FunctionFragment;
    "setPrivateRaffleSaleEnabled()": FunctionFragment;
    "setPrivateSaleEnabled()": FunctionFragment;
    "setPublicSaleEnabled()": FunctionFragment;
    "setRaffleSaleEnabled()": FunctionFragment;
    "setRaffleWhitelist(bytes32)": FunctionFragment;
    "setprivateWhitelist(bytes32)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalReleased(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "whitelistRedeemedCount()": FunctionFragment;
    "workflow()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRICE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRIVATE_RAFFLE_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RAFFLE_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RAFFLE_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELIST_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkflowStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gift", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "giveaway", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notRevealedUri",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "payee", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "privateRaffleRedeemed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "privateRedeemed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "privateWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicRedeemed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "publicRedeemedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rafflePrivateRedeemedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raffleRedeemed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleRedeemedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raffleWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPrivateRaffle",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPrivateSale",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRaffle",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "released",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reveal", values: [string]): string;
  encodeFunctionData(functionFragment: "revealed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNotRevealedURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrivatePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrivateRaffleSaleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrivateSaleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSaleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRaffleSaleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRaffleWhitelist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setprivateWhitelist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistRedeemedCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "workflow", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRIVATE_RAFFLE_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RAFFLE_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RAFFLE_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELIST_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkflowStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gift", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "giveaway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notRevealedUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privateRaffleRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicRedeemedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rafflePrivateRedeemedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleRedeemedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPrivateRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPrivateSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revealed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNotRevealedURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrivatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrivateRaffleSaleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrivateSaleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSaleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaffleSaleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaffleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setprivateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRedeemedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workflow", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ERC20PaymentReleased(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PayeeAdded(address,uint256)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "PaymentReleased(address,uint256)": EventFragment;
    "PrivateMint(address,uint256,uint256)": EventFragment;
    "PrivateRaffleMint(address,uint256,uint256)": EventFragment;
    "PublicMint(address,uint256,uint256)": EventFragment;
    "RaffleMint(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC20PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrivateMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrivateRaffleMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type ERC20PaymentReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; to: string; amount: BigNumber }
>;

export type ERC20PaymentReleasedEventFilter =
  TypedEventFilter<ERC20PaymentReleasedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PayeeAddedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; shares: BigNumber }
>;

export type PayeeAddedEventFilter = TypedEventFilter<PayeeAddedEvent>;

export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export type PaymentReleasedEvent = TypedEvent<
  [string, BigNumber],
  { to: string; amount: BigNumber }
>;

export type PaymentReleasedEventFilter = TypedEventFilter<PaymentReleasedEvent>;

export type PrivateMintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _minter: string; _amount: BigNumber; _price: BigNumber }
>;

export type PrivateMintEventFilter = TypedEventFilter<PrivateMintEvent>;

export type PrivateRaffleMintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _minter: string; _amount: BigNumber; _price: BigNumber }
>;

export type PrivateRaffleMintEventFilter =
  TypedEventFilter<PrivateRaffleMintEvent>;

export type PublicMintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _minter: string; _amount: BigNumber; _price: BigNumber }
>;

export type PublicMintEventFilter = TypedEventFilter<PublicMintEvent>;

export type RaffleMintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _minter: string; _amount: BigNumber; _price: BigNumber }
>;

export type RaffleMintEventFilter = TypedEventFilter<RaffleMintEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MetaFarmers extends BaseContract {
  contractName: "MetaFarmers";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaFarmersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRIVATE_RAFFLE_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    RAFFLE_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    RAFFLE_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    WHITELIST_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWorkflowStatus(overrides?: CallOverrides): Promise<[number]>;

    gift(
      _mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    giveaway(
      giveawayAddressTable: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notRevealedUri(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payee(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    privateRaffleRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    privateRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    privateWhitelist(overrides?: CallOverrides): Promise<[string]>;

    publicRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publicRedeemedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleMint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rafflePrivateRedeemedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    raffleRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    raffleRedeemedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    raffleWhitelist(overrides?: CallOverrides): Promise<[string]>;

    redeemPrivateRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemPrivateSale(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "release(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reveal(
      revealedBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealed(overrides?: CallOverrides): Promise<[boolean]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrivatePrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrivateRaffleSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrivateSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRaffleSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRaffleWhitelist(
      whitelist_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setprivateWhitelist(
      whitelist_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shares(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalReleased()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistRedeemedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    workflow(overrides?: CallOverrides): Promise<[number]>;
  };

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  PRIVATE_RAFFLE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  RAFFLE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  RAFFLE_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  WHITELIST_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWorkflowStatus(overrides?: CallOverrides): Promise<number>;

  gift(
    _mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  giveaway(
    giveawayAddressTable: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  notRevealedUri(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  privateRaffleRedeemed(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  privateRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  privateWhitelist(overrides?: CallOverrides): Promise<string>;

  publicRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  publicRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleMint(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rafflePrivateRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

  raffleRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  raffleRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

  raffleWhitelist(overrides?: CallOverrides): Promise<string>;

  redeemPrivateRaffle(
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemPrivateSale(
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemRaffle(
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "release(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "release(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "released(address,address)"(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "released(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reveal(
    revealedBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealed(overrides?: CallOverrides): Promise<boolean>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _newBaseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNotRevealedURI(
    _notRevealedURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrivatePrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrivateRaffleSaleEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrivateSaleEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicSaleEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRaffleSaleEnabled(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRaffleWhitelist(
    whitelist_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setprivateWhitelist(
    whitelist_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "totalReleased(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

  workflow(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRIVATE_RAFFLE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    RAFFLE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    RAFFLE_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELIST_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWorkflowStatus(overrides?: CallOverrides): Promise<number>;

    gift(_mintAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    giveaway(
      giveawayAddressTable: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    notRevealedUri(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    privateRaffleRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateWhitelist(overrides?: CallOverrides): Promise<string>;

    publicRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    publicRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleMint(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rafflePrivateRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    raffleRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    raffleRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    raffleWhitelist(overrides?: CallOverrides): Promise<string>;

    redeemPrivateRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPrivateSale(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "release(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reveal(revealedBaseURI: string, overrides?: CallOverrides): Promise<void>;

    revealed(overrides?: CallOverrides): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_newBaseURI: string, overrides?: CallOverrides): Promise<void>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPrivatePrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrivateRaffleSaleEnabled(overrides?: CallOverrides): Promise<void>;

    setPrivateSaleEnabled(overrides?: CallOverrides): Promise<void>;

    setPublicSaleEnabled(overrides?: CallOverrides): Promise<void>;

    setRaffleSaleEnabled(overrides?: CallOverrides): Promise<void>;

    setRaffleWhitelist(
      whitelist_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setprivateWhitelist(
      whitelist_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    whitelistRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    workflow(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ERC20PaymentReleased(address,address,uint256)"(
      token?: string | null,
      to?: null,
      amount?: null
    ): ERC20PaymentReleasedEventFilter;
    ERC20PaymentReleased(
      token?: string | null,
      to?: null,
      amount?: null
    ): ERC20PaymentReleasedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PayeeAdded(address,uint256)"(
      account?: null,
      shares?: null
    ): PayeeAddedEventFilter;
    PayeeAdded(account?: null, shares?: null): PayeeAddedEventFilter;

    "PaymentReceived(address,uint256)"(
      from?: null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(from?: null, amount?: null): PaymentReceivedEventFilter;

    "PaymentReleased(address,uint256)"(
      to?: null,
      amount?: null
    ): PaymentReleasedEventFilter;
    PaymentReleased(to?: null, amount?: null): PaymentReleasedEventFilter;

    "PrivateMint(address,uint256,uint256)"(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): PrivateMintEventFilter;
    PrivateMint(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): PrivateMintEventFilter;

    "PrivateRaffleMint(address,uint256,uint256)"(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): PrivateRaffleMintEventFilter;
    PrivateRaffleMint(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): PrivateRaffleMintEventFilter;

    "PublicMint(address,uint256,uint256)"(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): PublicMintEventFilter;
    PublicMint(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): PublicMintEventFilter;

    "RaffleMint(address,uint256,uint256)"(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): RaffleMintEventFilter;
    RaffleMint(
      _minter?: string | null,
      _amount?: null,
      _price?: null
    ): RaffleMintEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRIVATE_RAFFLE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    RAFFLE_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    RAFFLE_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    WHITELIST_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorkflowStatus(overrides?: CallOverrides): Promise<BigNumber>;

    gift(
      _mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    giveaway(
      giveawayAddressTable: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notRevealedUri(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payee(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    privateRaffleRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    privateWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    publicRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    publicRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleMint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rafflePrivateRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    raffleRedeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    raffleRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    raffleWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    redeemPrivateRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemPrivateSale(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "release(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reveal(
      revealedBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealed(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrivatePrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrivateRaffleSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrivateSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRaffleSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRaffleWhitelist(
      whitelist_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setprivateWhitelist(
      whitelist_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistRedeemedCount(overrides?: CallOverrides): Promise<BigNumber>;

    workflow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRIVATE_RAFFLE_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RAFFLE_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RAFFLE_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WHITELIST_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorkflowStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gift(
      _mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    giveaway(
      giveawayAddressTable: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notRevealedUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payee(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateRaffleRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicRedeemedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleMint(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rafflePrivateRedeemedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleRedeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleRedeemedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemPrivateRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemPrivateSale(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemRaffle(
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "release(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      revealedBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _newBaseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNotRevealedURI(
      _notRevealedURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrivatePrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrivateRaffleSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrivateSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRaffleSaleEnabled(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRaffleWhitelist(
      whitelist_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setprivateWhitelist(
      whitelist_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalReleased()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistRedeemedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workflow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
